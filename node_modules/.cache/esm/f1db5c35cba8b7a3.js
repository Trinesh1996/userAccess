_cba‍.x([["default",()=>_cba‍anonymous]]);var _ = require("lodash")

               function  _cba‍anonymous( { db } )
{

    // INSERT
    async function insertNewUser (user)
    {
        var user_credentials = {
            name: user.user_name,
            surname: user.user_surname,
            user_email: user.user_email,
            password: user.password,
            contact_number_1: user.phone_number_1,
            contact_number_2: user.phone_number_2,
            street: user.street,
            suburb: user.suburb,
            city: user.city,
            postal_code: user.postal_code,
            country: user.country,
            currency: user.currency,
            createdSource_ip: user.createdSource_ip,
            createdSource_browser: user.createdSource_browser,
            createdSource_macddress: user.createdSource_MACAddress,
            createdSource_createdBy: user.createdSource_createdBy,
            createdsource_createdat: user.createdSource_createdAt
        }

        const query =
        {
            // give the query a unique name
            name: 'insert-user',
            text: `INSERT INTO users
            (
                name, surname, email, password, contact_number_1,
                contact_number_2, street,
                suburb, city, postal_code, country, currency, createdSource_ip,
                createdSource_browser, createdSource_MACAddress, createdSource_createdBy, createdSource_createdAt
            )
            values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)`,
            values: [

                user_credentials.name, user_credentials.surname,
                user_credentials.user_email, user_credentials.password,
                user_credentials.contact_number_1, user_credentials.contact_number_2,
                user_credentials.street, user_credentials.suburb, user_credentials.city,
                user_credentials.postal_code, user_credentials.country, user_credentials.currency, user_credentials.createdSource_ip,
                user_credentials.createdSource_browser, user_credentials.createdSource_macddress, user_credentials.createdSource_createdBy,
                user_credentials.createdsource_createdat
            ],
        }

        var getUsers = await db.query("SELECT * from users").rows
        _.forEach(getUsers, function (data) {
            if (user_credentials.user_email === data.email) {
                console.log("USER EXISTS")
            }
        })
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    // GETS
    async function getAllUsersSortedAsc ()
    {
        await db.query("SELECT * from users ORDER BY surname ASC", function (err, res) {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function getAllUsersSortedDesc ()
    {
        await db.query("SELECT * from users ORDER BY surname DESC", function (err, res) {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function getAllUsersSortedByCreatedRecently ()
    {
        await db.query("SELECT * from users ORDER BY createdSource_createdAt ASC", function (err, res) {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function getAllUsersSortedByCreatedLast ()
    {
        await db.query("SELECT * from users ORDER BY createdSource_createdAt DESC", function (err, res) {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUserByName (name)
    {
        const query =
        {
            name: 'get-user-by-name',
            text: `SELECT * from users where name = $1 ORDER BY surname ASC`,
            values: [name],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function getUserById (id)
    {
        const query =
        {
            name: 'get-user-by-id',
            text: `SELECT * from users where id = $1`,
            values: [id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUserBySurname (surname)
    {
        const query =
        {
            name: 'get-user-by-surname',
            text: `SELECT * from users where surname = $1 ORDER BY name ASC`,
            values: [surname],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function getUserByNameAndSurname (name, surname)
    {
        const query =
        {
            name: 'get-user-by-name-surname',
            text: `SELECT * from users where name = $1 AND surname = $2 ORDER BY email ASC`,
            values: [name, surname],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUsersByEmail (email)
    {
        const query =
        {
            name: 'get-user-by-email',
            text: `SELECT * from users where email = $1`,
            values: [email],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function getUsersByNameEmailAndSurname (name, surname, email)
    {
        const query =
        {
            name: 'get-user-by-email',
            text: `SELECT * from users where name = $1 AND surname = $2 AND email = $3`,
            values: [name, surname, email],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUsersByStreetAddress (street)
    {
        const query =
        {
            name: 'get-user-by-streetAddress',
            text: `SELECT * from users where street = $1 ORDER BY surname ASC`,
            values: [street],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUsersByCity (city)
    {
        const query =
        {
            name: 'get-user-by-city',
            text: `SELECT * from users where city = $1 ORDER BY surname ASC`,
            values: [city],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUsersByCountry (country)
    {
        const query =
        {
            name: 'get-user-by-country',
            text: `SELECT * from users where country = $1 ORDER BY surname ASC`,
            values: [country],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUsersByCityAndCountry (city, country)
    {
        const query =
        {
            name: 'get-user-by-city-country',
            text: `SELECT * from users where city = $1 AND country = $2 ORDER BY surname ASC`,
            values: [city, country],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function getUsersCreatedBy (createdBy)
    {
        const query =
        {
            name: 'get-user-createdBy',
            text: `SELECT * from users where createdSource_createdBy = $1 ORDER BY surname ASC`,
            values: [createdBy],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    // DELETES
    async function deleteAllUsers ()
    {
        await db.query("DELETE from users", function (err, res) {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function deleteUserById  (id)
    {
        const query =
        {
            name: 'delete-user-id',
            text: `DELETE from users where id = $1`,
            values: [id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    // UPDATES
    async function updateUsersName (newVal, id)
    {
        const query =
        {
            name: 'update-user-name',
            text: `UPDATE users SET name = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    async function updateUsersSurname(newVal, id)
    {
        const query =
        {
            name: 'update-user-surname',
            text: `UPDATE users SET surname = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUsersEmail (newVal, id)
    {
        const query =
        {
            name: 'update-user-email',
            text: `UPDATE users SET email = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUsersPassword (newVal, id)
    {
        const query =
        {
            name: 'update-user-password',
            text: `UPDATE users SET password = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUserContactNumberOne(newVal, id)
    {
        const query =
        {
            name: 'update-user-contact_no_1',
            text: `UPDATE users SET contact_number_1= $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUserContactNumberTwo(newVal, id)
    {
        const query =
        {
            name: 'update-user-contact_no_2',
            text: `UPDATE users SET contact_number_2= $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUserStreet (newVal, id)
    {
        const query =
        {
            name: 'update-user-street',
            text: `UPDATE users SET street = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUsersSuburb (newVal, id)
    {
        const query =
        {
            name: 'update-user-suburb',
            text: `UPDATE users SET suburb = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUsersCity (newVal, id)
    {
        const query =
        {
            name: 'update-user-city',
            text: `UPDATE users SET city = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUsersPostalCode (newVal, id)
    {
        const query =
        {
            name: 'update-user-postal_code',
            text: `UPDATE users SET postal_code = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUsersCountry (newVal, id)
    {
        const query =
        {
            name: 'update-user-country',
            text: `UPDATE users SET country = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }
    async function updateUsersCurrency (newVal, id)
    {
        const query =
        {
            name: 'update-user-currency',
            text: `UPDATE users SET currency = $1 where id = $2`,
            values: [newVal, id],
        }
        await db.query(query, function (err, res)
        {
            if (err)
            {
                return err
            }
            else
            {
                return res.rows
            }
        })
    }

    return Object.freeze({
        insertNewUser
        ,getAllUsersSortedAsc
        ,getAllUsersSortedDesc
        ,getAllUsersSortedByCreatedRecently
        ,getAllUsersSortedByCreatedLast
        ,getUserByName
        ,getUserById
        ,getUserBySurname
        ,getUserByNameAndSurname
        ,getUsersByEmail
        ,getUsersByNameEmailAndSurname
        ,getUsersByStreetAddress
        ,getUsersByCity
        ,getUsersByCountry
        ,getUsersByCityAndCountry
        ,getUsersCreatedBy
        ,deleteAllUsers
        ,deleteUserById
        ,updateUsersName
        ,updateUsersSurname
        ,updateUsersEmail
        ,updateUsersPassword
        ,updateUserContactNumberOne
        ,updateUserContactNumberTwo
        ,updateUserStreet
        ,updateUsersSuburb
        ,updateUsersCity
        ,updateUsersPostalCode
        ,updateUsersCountry
        ,updateUsersCurrency
    })
}