_273‍.x([["default",()=>_273‍.o]]);var fs = require("fs")
var users = users || {}

users.entity = function entity (userSchema) {

    // validate fields
    var self = this
    // user variables validation
    self.userSchema =  userSchema.$schemas.user_schema.properties

    // general user information
    self._id = self.userSchema["_id"]
    self.user_name = self.userSchema["user_name"]
    self.user_surname = self.userSchema["user_surname"]
    self.user_email = self.userSchema["user_email"]
    self.password = self.userSchema["password"]
    self.user_groups = self.userSchema["user_groups"]
    self.user_roles = self.userSchema["user_roles"]
    self.phone_number_1 = self.userSchema["phone_number_1"]
    self.phone_number_2 = self.userSchema["phone_number_2"]

    // Geographical location
    self.street = self.userSchema["geographical_location"]["properties"]["street"]
    self.suburb = self.userSchema["geographical_location"]["properties"]["suburb"]
    self.city = self.userSchema["geographical_location"]["properties"]["city"]
    self.postal_code = self.userSchema["geographical_location"]["properties"]["postal_code"]
    self.country = self.userSchema["geographical_location"]["properties"]["country"]
    self.currency = self.userSchema["geographical_location"]["properties"]["currency"]

    // created source
    self.createdSource_ip = self.userSchema["createdSource"]["properties"]["ip"]
    self.createdSource_browser = self.userSchema["createdSource"]["properties"]["browser"]
    self.createdSource_MACAddress = self.userSchema["createdSource"]["properties"]["MACAddress"]
    self.createdSource_createdBy = self.userSchema["createdSource"]["properties"]["createdBy"]
    self.createdSource_createdAt = self.userSchema["createdSource"]["properties"]["createdAt"]

    // cuurent device in use
    self.currentDeviceInUse_ip = self.userSchema["currentDeviceInUse"]["properties"]["ip"]
    self.currentDeviceInUse_browser = self.userSchema["currentDeviceInUse"]["properties"]["browser"]
    self.currentDeviceInUse_MacAddress = self.userSchema["currentDeviceInUse"]["properties"]["MACAddress"]
}


users.entity.prototype.validation = function validation ({
    user_name
    ,user_surname
    ,user_email
    ,password
    ,phone_number_1
    ,phone_number_2
    ,street
    ,suburb
    ,city
    ,postal_code
    ,country
    ,currency
    ,createdSource_ip
    ,createdSource_browser
    ,createdSource_MACAddress
    ,createdSource_createdBy
    ,createdSource_createdAt
})
{
    var self = this
   
    // invalid type
    // Basic user information
  
    if (typeof user_name != self.user_name["type"] || user_name == "")
    {
        throw Error("user_name is an invalid type. user_name should be a string value")
    }

    if (typeof user_surname != self.user_surname["type"] || user_surname == "")
    {
        throw Error("user_surname is an invalid type. user_surname should be a string value")
    }

    if (typeof user_email != self.user_email["type"] || user_email == "")
    {
        throw Error("user_email is an invalid type. user_email should be a string value")
    }
    if (typeof password != self.password["type"] || password == "")
    {
        throw Error("user password is an invalid type. value/s user password should be an ecrypted string")
    }
    // if (!Array.isArray(user_groups) && user_groups == "")
    // {
    //     throw Error("user group is an invalid type. value/s user group should be an array")
    // }
    // if (!Array.isArray(user_roles) || user_roles == "")
    // {
    //     throw Error("user roles is an invalid type. value/s user roles should be an array")
    // }
    if (typeof phone_number_1 != self.phone_number_1["type"] || phone_number_1 == "")
    {
        throw Error("phone_number_one is an invalid type. value phone_number_one should be an string")
    }
    if (typeof phone_number_2 != self.phone_number_2["type"] || phone_number_2 == "")
    {
        throw Error("phone_number_two is an invalid type. value phone_number_two should be an string")
    }
    if (typeof street != self.street["type"] || street == "")
    {
        throw Error("street is an invalid type. value street should be a string")
    }
    if (typeof suburb != self.suburb["type"] || suburb == "")
    {
        throw Error("suburb is an invalid type. value suburb should be a string")
    }
    if (typeof city != self.city["type"] || city == "")
    {
        throw Error("city is an invalid type. value city should be a string")
    }
    if (typeof postal_code != self.postal_code["type"] || postal_code == "")
    {
        throw Error("postal code is an invalid type. value for postal code should be a string")
    }
    if (typeof country != self.country["type"] || country == "")
    {
        throw Error("country is an invalid type. value country should be a string")
    }
    if (typeof currency != self.currency["type"] || currency == "")
    {
        throw Error("currency is an invalid type. value for currency should be a string")
    }

    // created source
    if (typeof createdSource_ip != self.createdSource_ip["type"] || createdSource_ip == "")
    {
        throw Error("created_source_ip is an invalid type. value should be a string")
    }
    if (typeof createdSource_browser != self.createdSource_browser["type"] || createdSource_browser == "")
    {
        throw Error("created_source_browser is an invalid type. value should be a string")
    }
    if (typeof createdSource_MACAddress != self.createdSource_MACAddress["type"] || createdSource_MACAddress == "")
    {
        throw Error("created_source_MACCADDRESS is an invalid type. value should be a string")
    }
    if (typeof createdSource_createdAt != self.createdSource_createdAt["type"] || createdSource_createdAt == "")
    {
        throw Error("created_source_createdAt is an invalid type. value should be a number")
    }
    if (typeof createdSource_createdBy != self.createdSource_createdBy["type"] || createdSource_createdBy == "")
    {
        throw Error("created_source_createdBy is an invalid type. value should be a string")
    }

    // // current devices in use
    // if (typeof currentDeviceInUse_ip != self.currentDeviceInUse_ip["type"] || currentDeviceInUse_ip == "")
    // {
    //     throw Error("currentDeviceInUse_ip is an invalid type. value should be a string")
    // }
    // if (typeof currentDeviceInUse_browser != self.currentDeviceInUse_browser["type"] || currentDeviceInUse_browser == "")
    // {
    //     throw Error("currentDeviceInUse_browser is an invalid type. value should be a string")
    // }
    // if (typeof currentDeviceInUse_MacAddress != self.currentDeviceInUse_MacAddress["type"] || currentDeviceInUse_MacAddress == "")
    // {
    //     throw Error("currentDeviceInUse_MACADDRESS is an invalid type. value should be a string")
    // }

    else
    {
        return Object.freeze({
            get_user_name: () => user_name,
            get_user_surname: () => user_surname,
            get_user_email: () => user_email,
            get_user_password: () => password,
            get_phone_number_1: () => phone_number_1,
            get_phone_number_2: () => phone_number_2,
            get_street: () => street,
            get_suburb: () => suburb,
            get_city: () => city,
            get_postal_code: () => postal_code,
            get_country: () => country,
            get_currency: () => currency,
            get_createdSource_ip: () => createdSource_ip,
            get_createdSource_browser: () => createdSource_browser,
            get_createdSource_MACAddress: () => createdSource_MACAddress,
            get_createdSource_createdBy: () => createdSource_createdBy,
            get_createdSource_createdAt: () => createdSource_createdAt
        })
    }
}

_273‍.d(users.entity);
